plugins {
	id 'java-gradle-plugin'

	id 'groovy'

	id 'jacoco'
	id "pl.droidsonroids.jacoco.testkit" version "1.0.7"
	id 'maven-publish'
	id 'com.gradle.plugin-publish' version '0.12.0'

	id 'com.palantir.git-version' version '0.12.3'
	id "com.diffplug.gradle.spotless" version "4.5.1"
}

version = "${gitVersion()}".replaceFirst(~/^v/, '')

spotless {
	groovy {
		importOrder() // standard import order

		excludeJava()
		greclipse()

		licenseHeaderFile file("license-header.spotless") // or licenseHeaderFile
	}
	groovyGradle {
		target '*.gradle' // default target of groovyGradle
		greclipse()
	}
}

repositories {
	mavenCentral()
}

task createClasspathManifest {
	def outputDir = file("${buildDir}/${name}")

	inputs.files sourceSets.main.runtimeClasspath
	outputs.dir outputDir

	doLast {
		outputDir.mkdirs()
		file("${outputDir}/plugin-classpath.txt").text = sourceSets.main.runtimeClasspath.join("\n")
	}
}

dependencies {
	testImplementation 'org.spockframework:spock-core:2.0-M4-groovy-2.5'
	testImplementation platform('org.junit:junit-bom:5.7.1')
	testImplementation 'org.junit.jupiter:junit-jupiter'
	testCompile "org.assertj:assertj-core:3.11.1"
	testCompile files(createClasspathManifest)
}

jacoco {
	toolVersion = "0.8.6"
}

jacocoTestReport {
	reports.html.enabled = true
	executionData.setFrom fileTree(buildDir).include("/jacoco/*.exec")
}


sourceCompatibility = '1.8'
targetCompatibility = '1.8'


gradlePlugin {
	plugins {
		gitlabRepositories {
			id = 'at.schrottner.gitlab-repositories'
			implementationClass = 'at.schrottner.gradle.GitlabRepositoriesPlugin'
			displayName = 'GitLab-Repositories'
			description = 'Handling Maven GitLab dependencies easy. Define multiple tokens and selectively apply them to repositories.'
		}
	}
}

pluginBundle {
	website = 'http://schrottner.at/gradle-gitlab-repositories/'
	vcsUrl = 'https://github.com/aepfli/gradle-gitlab-repositories.git'
	tags = [
		'GitLab',
		'repositories',
		'maven'
	]
}

test {
	useJUnitPlatform()
	testLogging {
		events "passed", "skipped", "failed"
	}
}

sourceSets {
	functionalTest {
	}
}

gradlePlugin.testSourceSets(sourceSets.functionalTest)
configurations.functionalTestImplementation.extendsFrom(configurations.testImplementation)
configurations.functionalTestRuntimeOnly.extendsFrom(configurations.testRuntimeOnly)

task functionalTest(type: Test) {
	useJUnitPlatform()
	testLogging {
		events "passed", "skipped", "failed"
	}
	description = 'Runs the functional tests.'
	group = 'verification'
	testClassesDirs = sourceSets.functionalTest.output.classesDirs
	classpath = sourceSets.functionalTest.runtimeClasspath
}

functionalTest.dependsOn generateJacocoTestKitProperties
generateJacocoTestKitProperties.destinationFile = "$buildDir.absolutePath/jacoco/functional.exec"

check {
	// Run the functional tests as part of `check`
	dependsOn(tasks.functionalTest)
}

