/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Gradle plugin project to get you started.
 * For more details take a look at the Writing Custom Plugins chapter in the Gradle
 * User Manual available at https://docs.gradle.org/5.6.4/userguide/custom_plugins.html
 */

plugins {
    // Apply the Java Gradle plugin development plugin to add support for developing Gradle plugins
    id 'java-gradle-plugin'

    // Apply the Groovy plugin to add support for Groovy
    id 'groovy'

    id 'maven-publish'
    id 'com.gradle.plugin-publish' version '0.12.0'

    id 'com.palantir.git-version' version '0.12.3'
    id "com.diffplug.gradle.spotless" version "4.5.1"
}

version = gitVersion()
repositories {
    // Use jcenter for resolving dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
}

dependencies {
    // Use the awesome Spock testing and specification framework
    testImplementation 'org.spockframework:spock-core:1.3-groovy-2.5'
}

gradlePlugin {
    // Define the plugin
    plugins {
        gitlabRepositories {
            id = 'at.schrottner.gitlab-repositories'
            implementationClass = 'at.schrottner.gradle.GitlabRepositoriesPlugin'
            displayName = 'GitLab-Repositories'
            description = 'Handling GitLab repositories made easy. Easy setup for GitLab dependencies, for gradle plugins and others'
        }
        gitlabSettings {
            id = 'at.schrottner.gitlab-settings-repositories'
            implementationClass = 'at.schrottner.gradle.GitlabRepositoriesSettingsPlugin'
            displayName = 'GitLab-Repositories for Settings.gradle'
            description = 'Handling GitLab repositories made easy. Easy setup for GitLab dependencies, for gradle plugins and others'
        }
    }
}
pluginBundle {
    website = 'https://github.com/aepfli/gradle-gitlab-repositories-plugin'
    vcsUrl = 'https://github.com/aepfli/gradle-gitlab-repositories-plugin.git'
    tags = ['GitLab', 'repositories']
}
// Add a source set for the functional test suite
sourceSets {
    functionalTest {
    }
}

gradlePlugin.testSourceSets(sourceSets.functionalTest)
configurations.functionalTestImplementation.extendsFrom(configurations.testImplementation)

// Add a task to run the functional tests
task functionalTest(type: Test) {
    testClassesDirs = sourceSets.functionalTest.output.classesDirs
    classpath = sourceSets.functionalTest.runtimeClasspath
}

check {
    // Run the functional tests as part of `check`
    dependsOn(tasks.functionalTest)
}
