/*
 * This Groovy source file was generated by the Gradle 'init' task.
 */
package at.schrottner.gradle

import org.gradle.testkit.runner.BuildResult
import org.gradle.testkit.runner.GradleRunner
import org.junit.jupiter.api.BeforeEach
import org.junit.jupiter.api.Test
import org.junit.jupiter.api.io.TempDir

import static org.assertj.core.api.Assertions.assertThat

class GitlabRepositoriesPluginFunctionalTests {
	private pluginClasspath = getClass().classLoader.findResource("plugin-classpath.txt")
			.readLines()
			.collect { it.replace('\\\\', '\\\\\\\\') } // escape backslashes in Windows paths
			.collect { "'$it'" }
			.join(", ")

	File projectDir
	File settingsGradle
	File buildGradle

	@BeforeEach
	void setup(@TempDir File projectDir) {
		this.projectDir = projectDir

		settingsGradle = new File(projectDir, "settings.gradle")
		buildGradle = new File(projectDir, "build.gradle")
	}

	@Test
	void "only used in settings"() {
		//given:
		def id = "1234"
		def renamed = "123"
		settingsGradle << """
            $apply    
			gitLab {
				${generateToken('DeployToken', 'DeployToken')}
            }

			gitLab.maven("$id")
			gitLab.maven("$renamed") { name = "renamed" }
			gitLab.maven("specialToken") { 
				name = "justToken0"
				tokenSelector = "token0" 
			}
			gitLab.maven("specialToken1") {
				name = "justToken1"
				tokenSelector = "token1" 
			}
			gitLab.maven("specialTokenSelection") {
				name = "specialTokenSelection"
				tokenSelectors = ["jobToken", "token1"]
			}
        """
		buildGradle << """
			task gitLabTask {}
		"""

		//when:
		BuildResult result = runTest()

		//then:
		assertThat(result.output)
				.contains("BUILD SUCCESSFUL")
				.containsSubsequence(
						"added Job-Token: jobToken",
						"added Deploy-Token: token0",
						"added Deploy-Token: token1"
				)
				.contains("Maven Repository GITLAB-$id is using 'token0'")
				.contains("Maven Repository renamed is using 'token0'")
				.contains("Maven Repository justToken0 is using 'token0'")
				.contains("Maven Repository justToken1 is using 'token1'")
				.contains("Maven Repository specialTokenSelection is using 'token1'")
	}

	@Test
	void "only used in project"() {
		//given:
		buildGradle << """
            $apply    
			gitLab {
				${generateToken('DeployToken', 'DeployToken')}
            }
        """

		//when:
		BuildResult result = runTest()

		//then:
		assertThat(result.output)
				.contains("BUILD SUCCESSFUL")
				.containsSubsequence(
						"added Job-Token: jobToken",
						"added Deploy-Token: token0",
						"added Deploy-Token: token1"
				)
	}

	@Test
	void "used in settings and project"() {
		//given:
		settingsGradle << """ 
            $apply
			gitLab {
				${generateToken('DeployToken', 'DeployToken', 'DeployToken')}
            }
        """

		buildGradle << """
 			buildscript {
				dependencies {
					classpath files($pluginClasspath)
				}
			}
			plugins {
				id 'maven-publish'
			}
            import at.schrottner.gradle.auths.*  
			apply plugin: at.schrottner.gradle.GitlabRepositoriesPlugin
            gitLab {
				${generateToken('PrivateToken', 'PrivateToken')}
            }
			publishing {
				repositories {
					gitLab.upload(owner, "")
					gitLab.upload(owner, "testNotAdded") {
						name = "NotAdded"
						tokenSelector = "jobToken"
					}
					gitLab.upload(owner, "testAdded") {
						name = "GitLab"
						tokenSelector = "token1"
					}
					gitLab.upload(owner, "testAdded") {
						name = "GitLabSettingsToken"
						tokenSelector = "token2"
					}
					gitLab.upload(owner, "testAnyToken") {
						name = "GitLabAnyToken"
					}
				}
			}
        """
		//when:
		BuildResult result = runTest()

		//then:
		assertThat(result.output)
				.contains("BUILD SUCCESSFUL")
				.containsSubsequence(
						"added Job-Token: jobToken",
						"added Deploy-Token: token0",
						"added Deploy-Token: token1",
						"added Deploy-Token: token2",
						"Settings evaluated",
						"replaced Job-Token: jobToken",
						"replaced Private-Token: token0",
						"replaced Private-Token: token1"
				)
				.contains("publishAllPublicationsToGitLabSettingsTokenRepository")
				.contains("publishAllPublicationsToGitLabAnyTokenRepository")
				.contains("publishAllPublicationsToGitLabRepository")
				.contains("Maven Repository NotAdded was not added, as no token could be applied!\n")
	}

	def getApply() {
		""" 
            import at.schrottner.gradle.auths.*      
 			buildscript {
				dependencies {
					classpath files($pluginClasspath)
				}
			}
			apply plugin: at.schrottner.gradle.GitlabRepositoriesPlugin
		"""
	}

	private BuildResult runTest() {
		def runner = GradleRunner.create()
		runner.forwardOutput()
		runner.withPluginClasspath()
		runner.withArguments("tasks", "-i", "-s")
		runner.withProjectDir(projectDir)
		runner.build()
	}

	private String generateToken(String... tokenTypes) {
		def output = ""
		tokenTypes.eachWithIndex { it, index ->
			output += """
			token($it) {
				it.key = 'token$index'
				it.value = 'test'
			}
			"""
		}
		return output
	}
}
