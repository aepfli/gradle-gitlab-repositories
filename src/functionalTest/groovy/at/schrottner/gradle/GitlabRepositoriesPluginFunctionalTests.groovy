/*
 * This Groovy source file was generated by the Gradle 'init' task.
 */
package at.schrottner.gradle

import org.gradle.testkit.runner.BuildResult
import org.gradle.testkit.runner.GradleRunner
import org.junit.jupiter.api.BeforeEach
import org.junit.jupiter.api.Test
import org.junit.jupiter.api.condition.DisabledIfEnvironmentVariable
import org.junit.jupiter.api.condition.EnabledIfEnvironmentVariable
import org.junit.jupiter.api.io.TempDir
import org.slf4j.Logger
import org.slf4j.LoggerFactory

import java.nio.file.Files

import static org.assertj.core.api.Assertions.assertThat

class GitlabRepositoriesPluginFunctionalTests {

	private static final Logger logger = LoggerFactory.getLogger(GitlabRepositoriesPluginFunctionalTests.class)
	public static final String SETTINGS_GRADLE = 'settings.gradle'
	public static final String BUILD_GRADLE = "build.gradle"
	private static def existingId = "1234"
	private static def renamedId = "123"
	private static def realms = ["group", "project"]
	private pluginClasspath = getClass().classLoader.findResource("plugin-classpath.txt")
			.readLines()
			.collect { it.replace('\\\\', '\\\\\\\\') } // escape backslashes in Windows paths
			.collect { "$it" }
			.join(",")

	File projectDir
	File settingsGradle
	File buildGradle
	File gradleProperties

	@BeforeEach
	void setup(@TempDir File projectDir) {
		this.projectDir = projectDir
		gradleProperties = new File(projectDir, "gradle.properties")
		gradleProperties << """
			existingId=$existingId
			renamedId=$renamedId
			pluginClasspath=$pluginClasspath
			realms=${realms.join(',')}
		"""
	}

	@Test
	void "only used in settings"() {
		//given:
		settingsGradle = TestFileUtils.getTestResource(new File(projectDir, SETTINGS_GRADLE), SETTINGS_GRADLE)
		buildGradle = new File(projectDir, BUILD_GRADLE)
		buildGradle << """
			task gitLabTask {}
		"""

		//when:
		BuildResult result = runTest()

		//then:
		realms.each {
			def capitalized = it.capitalize()
			def repoPrefix = "GitLab-${capitalized}"
			assertThat(result.output)
					.contains("BUILD SUCCESSFUL")
					.containsSubsequence(
							"added Job-Token: jobToken",
							"added Private-Token: tokenIgnoredNoValue",
							"added Deploy-Token: token0",
							"added Deploy-Token: token1"
					)
					.containsSubsequence("Maven Repository $repoPrefix-$existingId is using 'token0'",
							"Maven Repository $it-renamed is using 'token0'",
							"Maven Repository $repoPrefix-specialToken is using 'token0'",
							"Maven Repository $repoPrefix-specialToken1 is using 'token1'",
							"Maven Repository $repoPrefix-specialTokenSelection is using 'token1'",
							"Maven Repository $repoPrefix-ignoredNoValue was not added, as no token could be applied!"
					)
					.doesNotContain("Maven Repository $repoPrefix-ignoredNoValue is using")
		}
	}

	@Test
	void "only used in project"() {
		//given:
		buildGradle = TestFileUtils.getTestResource(new File(projectDir, BUILD_GRADLE), BUILD_GRADLE)

		//when:
		BuildResult result = runTest()

		//then:
		realms.each {
			def capitalized = it.capitalize()
			def repoPrefix = "GitLab-${capitalized}"
			assertThat(result.output)
					.contains("BUILD SUCCESSFUL")
					.containsSubsequence(
							"added Job-Token: jobToken",
							"added Private-Token: tokenIgnoredNoValue",
							"added Private-Token: token0",
							"added Private-Token: token1"
					)
					.containsSubsequence("Maven Repository $repoPrefix-$existingId is using 'token0'",
							"Maven Repository $it-renamed is using 'token0'",
							"Maven Repository $repoPrefix-specialToken is using 'token0'",
							"Maven Repository $repoPrefix-specialToken1 is using 'token1'",
							"Maven Repository $repoPrefix-specialTokenSelection is using 'token1'",
							"Maven Repository $repoPrefix-ignoredNoValue was not added, as no token could be applied!"
					)
					.doesNotContain("Maven Repository $repoPrefix-ignoredNoValue is using")
		}
	}

	@Test
	void "used in settings and project"() {
		//given:
		settingsGradle = TestFileUtils.getTestResource(new File(projectDir, SETTINGS_GRADLE), SETTINGS_GRADLE)
		buildGradle = TestFileUtils.getTestResource(new File(projectDir, BUILD_GRADLE), BUILD_GRADLE)

		//when:
		BuildResult result = runTest()

		//then:
		realms.each {
			def capitalized = it.capitalize()
			def repoPrefix = "GitLab-${capitalized}"
			assertThat(result.output)
					.contains("BUILD SUCCESSFUL")
					.containsSubsequence(
							"added Job-Token: jobToken",
							"added Private-Token: tokenIgnoredNoValue",
							"added Deploy-Token: token0",
							"added Deploy-Token: token1",
							"Settings evaluated",
							"added Job-Token: jobToken",
							"added Private-Token: tokenIgnoredNoValue",
							"added Deploy-Token: token0",
							"added Deploy-Token: token1",
							"replaced Job-Token: jobToken",
							"replaced Private-Token: tokenIgnoredNoValue",
							"replaced Private-Token: token0",
							"replaced Private-Token: token1",
							"added Deploy-Token: tokenAdded"
					)
					.containsSubsequence("Maven Repository $repoPrefix-$existingId is using 'token0'",
							"Maven Repository $it-renamed is using 'token0'",
							"Maven Repository $repoPrefix-specialToken is using 'token0'",
							"Maven Repository $repoPrefix-specialToken1 is using 'token1'",
							"Maven Repository $repoPrefix-specialTokenSelection is using 'token1'",
							"Maven Repository $repoPrefix-ignoredNoValue was not added, as no token could be applied!"
					)
					.doesNotContain("Maven Repository $repoPrefix-ignoredNoValue is using")
		}
	}

	@Test
	@DisabledIfEnvironmentVariable(
			named = 'TEST_UPLOAD_TOKEN',
			matches = '^$',
			disabledReason = 'Upload deactivated due to missing TEST_UPLOAD_TOKEN'
	)
	void "uploadTest"() {
		def testFile = TestFileUtils.getTestResource(new File(projectDir, 'test.xml'), 'test.xml')
		settingsGradle = TestFileUtils.getTestResource(new File(projectDir, SETTINGS_GRADLE), SETTINGS_GRADLE)
		buildGradle = TestFileUtils.getTestResource(new File(projectDir, BUILD_GRADLE), 'build-upload.gradle')

		def uploadRunner = GradleRunner.create()
		uploadRunner.forwardOutput()
		uploadRunner.withPluginClasspath()
		uploadRunner.withArguments("publishTestPublicationToGitLabRepository", "-i", "-s")
		uploadRunner.withProjectDir(projectDir)
		def uploadResult = uploadRunner.build()
		def repoPrefix = "GitLab-Project"
		assertThat(uploadResult.output)
				.contains("BUILD SUCCESSFUL")
				.containsSubsequence(
						"added Job-Token: jobToken",
						"added Private-Token: tokenIgnoredNoValue",
						"added Deploy-Token: token0",
						"added Deploy-Token: token1",
						"Settings evaluated",
						"added Job-Token: jobToken",
						"added Private-Token: tokenIgnoredNoValue",
						"added Deploy-Token: token0",
						"added Deploy-Token: token1",
						"added Private-Token: testToken"
				)
				.containsSubsequence("Maven Repository $repoPrefix-$existingId is using 'token0'",
						"Maven Repository $repoPrefix-specialToken is using 'token0'",
						"Maven Repository $repoPrefix-specialToken1 is using 'token1'",
						"Maven Repository $repoPrefix-specialTokenSelection is using 'token1'",
						"Maven Repository $repoPrefix-ignoredNoValue was not added, as no token could be applied!",
						"Maven Repository GitLab is using 'testToken'",
				)
				.doesNotContain("Maven Repository $repoPrefix-ignoredNoValue is using")
				.contains("Publishing to repository 'GitLab'")

	}


	private BuildResult runTest() {
		def runner = GradleRunner.create()
		runner.forwardOutput()
		runner.withPluginClasspath()
		runner.withArguments("tasks", "-i", "-s")
		runner.withProjectDir(projectDir)
		runner.build()
	}

}
